package days17;

import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.stream.Collectors;

public class Ex01_02 {
	
	public static void main(String[] args) {
		
		Integer [] m = {3,5,2,4,1};
		System.out.println(Arrays.toString(m));
		
		
		
		
		
		
		
		
		
		/*
		// Arrays.sort(m, new 비교자());
		Arrays.sort(m, new Comparator<Integer>() { // 익명 클래스

			@Override
			public int compare(Integer o1, Integer o2) { 
				return o1-o2; // 오름차순
				// return o2-o1; // 내림차순
			}
		});
		
		System.out.println(Arrays.toString(m));
		*/
		
		
		
		
		// Arrays.sort(m, (o1,  o2)-> o2-o1); // 람다식: 위 코딩과 100% 똑같다. // 괄호도 한줄이라면 생략 가능
			 // 리턴문이 하나만 있으면 생략 가능
		
		Arrays.sort(m, (o1,  o2)-> o1.compareTo(o2)); // 이것도 같은 맥락이다. // 문자열 비교 compare
		 
		System.out.println(Arrays.toString(m)); // 내림차순
		
		
		
		
		
		/*
		Arrays.sort(m); // ASC 오름차순 정렬
		System.out.println(Arrays.toString(m));
		int [] temp = new int [m.length];
		for (int i = 0; i < m.length; i++) {
			temp[temp.length-1 -i] =m[i];
		}
		System.out.println(Arrays.toString(temp));
		*/
		
		
		
		
	
		/*
		// IntStream -> Stream<Integer>
		Integer [] temp = Arrays.stream(m).boxed().toArray(Integer[]::new);
		Arrays.sort(temp, Collections.reverseOrder());
		System.out.println(Arrays.toString(temp));
		*/
		
		
		
		
		
	} // main

} // class


class 비교자 implements Comparator {

	@Override
	public int compare(Object o1, Object o2) {
		
		int a = (int) o1;
		int b = (int) o2;
		
		// return a-b 오름차순
		return b-a; // 내림차순
	}
	
}


